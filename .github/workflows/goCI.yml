name: CI setup for Go #Name the workflow
on: #on event
  push:
    branches: [main] #identifying branch
    
jobs: #jobs to execute on event
  my-ci-job-1:
    name: My CI Job
    runs-on: ubuntu-18.04 # OS in VM
    steps:
    - name: Print a greeting
      run: |
        ls
        echo Hello there! # run terminal command
        
    # Test cURL
    - name: My cURL request 
      run: curl https://kwehbot.xyz/api/stats         
        
    - name: Setup Go environment
      uses: actions/setup-go@v2.1.3
      with:
        # The Go version to download (if necessary) and use. Supports semver spec and ranges.
        go-version: 1.16.5
        
    - name: Show Go version # verify that go is installed
      run: go version # show go version    
      
    - name: Checkout code # bring repo code to vm
      uses: actions/checkout@v2     
      
    - name: Check file system # check vm has my files
      run: |
        ls
        cat calc.go # print the content of calc.go
        
    - name: Checkout private repo remotely
      uses: actions/checkout@v2
      with:
        repository: lowkh2/GoSchoolRemoteExample # the private repo I'm accessing
        path: remoteRepo # directory in my vm
        token: ${{ secrets.GO_SECRET }}
        
    - name: Check file system and print file content # check vm has my files
      run: |
        ls -la remoteRepo
        cat remoteRepo/myText.txt
        
    - name: Install dependencies for Go
      run: |
        go get github.com/tebeka/go2xunit # Adds package for conversion
        go install
        go test -v # Command to run go test
        go test -v | go2xunit > report.xml # run test again and output as report.xml
        ls      
        
    - name: Publish unit test results
      uses: EnricoMi/publish-unit-test-result-action@v1.17 # Checkout Unit Test Reporting app
      if: always() # always do it
      with:
        files: report.xml # make use of a file we created

    # Report.xml asset
    - if: ${{ success() }}        
      name: Create upload directory
      run: mkdir upload

    - if: ${{ success() }}      
      name: Prepare documents
      run: mv report.xml ./upload
      
    - if: ${{ success() }}    
      name: Prepare artifacts
      uses: actions/upload-artifact@v2
      with:
        name: assetDocument
        path: upload
        
    - if: ${{ success() }} 
      name: Download Content
      uses: actions/download-artifact@v2
      with:
        name: assetDocument
    
    # Issue Creation
    - if: ${{ failure() }}
      name: Create issues notifications
      uses: nashmaniac/create-issue-action@v1.1
      with:
        title: Build Failed
        token: ${{secrets.GITHUB_TOKEN}}
        assignees: ${{github.actor}}
        labels: workflow-failed
        body: Workflow failed for commit ${{github.sha}}
        
    # Social Media Notifications
    - name: Notify on Telegram
      uses: yanzay/notify-telegram@v0.1.0
      if: always()
      with:
        chat: ${{ secrets.TELEGRAM_USER_ID }} # user id or channel name secret
        token: ${{ secrets.TELEGRAM_TOKEN }} # token secret
        status: ${{ job.status }} # do not modify this line     
        
    - name: Notify on Discord
      uses: fateyan/action-discord-notifier@v1
      with:
        message-title: New Commit Pushed
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
